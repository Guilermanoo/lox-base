?start     : program

program    : declaration*

declaration: var_decl
           | function_decl
           | class_decl
           | stmt

var_decl   : "var" VAR ("=" expr)? ";"

class_decl : "class" VAR ("<" VAR)? "{" class_body "}"
class_body : (method_decl)*
method_decl : VAR "(" params_list? ")" block
function_decl : "fun" VAR "(" params_list? ")" block
params_list   : VAR ("," VAR)*

?stmt      : expr ";"
           | print_cmd
           | block
           | if_stmt
           | while_stmt
           | for_stmt
           | return_stmt

print_cmd  : "print" expr ";"

block      : "{" declaration* "}"

if_stmt   : "if" "(" expr ")" stmt ("else" stmt)?

while_stmt : "while" "(" expr ")" stmt

for_stmt   : "for" "(" for_init for_cond ";" for_incr ")" stmt
for_init   : var_decl
           | expr ";"
           | ";"      -> empty_init
for_cond   : expr      -> cond_expr
           |           -> empty_cond
for_incr   : expr      -> incr_expr
           |           -> empty_incr

return_stmt: "return" expr? ";"

// EXPRESSÃ•ES
?expr      : assignment

?assignment: call "." VAR "=" assignment   -> setattr_expr
           | VAR "=" assignment           -> assign
           | or_expr

?or_expr   : and_expr ("or" and_expr)*   -> or_
?and_expr  : equality ("and" equality)*   -> and_
?equality  : comparison
         | equality "==" comparison   -> eq
         | equality "!=" comparison   -> ne

?comparison: addition
           | comparison ">" addition   -> gt
           | comparison ">=" addition  -> ge
           | comparison "<" addition   -> lt
           | comparison "<=" addition  -> le

?addition  : multiplication
         | addition "+" multiplication   -> add
         | addition "-" multiplication   -> sub

?multiplication: unary
               | multiplication "*" unary   -> mul
               | multiplication "/" unary   -> div
?unary: "!" unary   -> not_
      | "-" unary   -> neg_
      | call
?call: primary
     | call "(" params ")"   -> call
     | call "." VAR          -> getattr
?primary   : NUMBER
           | BOOL
           | VAR
           | STRING
           | NIL
           | "this"
           | "super"
           | "(" expr ")"

params     : [ expr ("," expr )* ]

BOOL.10     : "true" | "false"
NIL.10      : "nil"
RETURN.10   : "return"
CLASS.10    : "class"
FUN.10      : "fun"
VAR_KW.10   : "var"
IF.10       : "if"
ELSE.10     : "else"
WHILE.10    : "while"
FOR.10      : "for"
PRINT.10    : "print"
SUPER.10    : "super"
THIS.10     : "this"
VAR.1      : /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT